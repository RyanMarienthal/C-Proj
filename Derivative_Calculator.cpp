#include <iostream>
//LIST OF ORDERED PAIRS, EVENS ARE X AND ODDS ARE Y
float A[178 * 2] = {
0.01745277778,0.999919743169979,
0.03490555556,1.99953491906502,
0.05235833333,2.99854105317886,
0.06981111111,3.99663385651431,
0.08726388889,4.99350931826718,
0.1047166667,5.98886379842545,
0.1221694444,6.98239412025549,
0.1396222222,7.97379766264722,
0.157075,8.96277245228993,
0.1745277778,9.94901725565092,
0.1919805556,10.9322316707287,
0.2094333333,11.9121162185529,
0.2268861111,12.8883724344033,
0.2443388889,13.8607029587194,
0.2617916667,14.828811627674,
0.2792444444,15.7924035633818,
0.2966972222,16.7511852637174,
0.31415,17.704864691713,
0.3316027778,18.6531513645109,
0.3490555556,19.5957564418419,
0.3665083333,20.5323928140036,
0.3839611111,21.4627751893121,
0.4014138889,22.386620180999,
0.4188666667,23.3036463935286,
0.4363194444,24.2135745083092,
0.4537722222,25.1161273687708,
0.471225,26.0110300647848,
0.4886777778,26.8980100163992,
0.5061305556,27.7767970568647,
0.5235833333,28.6471235149245,
0.5410361111,29.5087242963454,
0.5584888889,30.3613369646631,
0.5759416667,31.2047018211178,
0.5933944444,32.0385619837571,
0.6108472222,32.8626634656794,
0.6283,33.6767552523962,
0.6457527778,34.4805893782898,
0.6632055556,35.2739210021407,
0.6806583333,36.0565084817046,
0.6981111111,36.8281134473147,
0.7155638889,37.588500874487,
0.7330166667,38.3374391555068,
0.7504694444,39.0747001699746,
0.7679222222,39.8000593542893,
0.785375,40.5132957700493,
0.8028277778,41.2141921713474,
0.8202805556,41.9025350709428,
0.8377333333,42.5781148052875,
0.8551861111,43.2407255983879,
0.8726388889,43.8901656244825,
0.8900916667,44.5262370695163,
0.9075444444,45.1487461913935,
0.9249972222,45.7575033789898,
0.94245,46.3523232099059,
0.9599027778,46.9330245069462,
0.9773555556,47.4994303933034,
0.9948083333,48.0513683464343,
1.012261111,48.5886702506079,
1.029713889,49.1111724481129,
1.047166667,49.6187157891061,
1.064619444,50.1111456800878,
1.082072222,50.5883121309904,
1.099525,51.0500698008637,
1.116977778,51.4962780421446,
1.134430556,51.926800943497,
1.151883333,52.3415073712099,
1.169336111,52.7402710091387,
1.186788889,53.1229703971811,
1.204241667,53.489488968272,
1.221694444,53.8397150838892,
1.239147222,54.1735420680575,
1.2566,54.4908682398416,
1.274052778,54.7915969443168,
1.291505556,55.0756365820095,
1.308958333,55.3429006367979,
1.326411111,55.5933077022638,
1.343863889,55.8267815064881,
1.361316667,56.0432509352831,
1.378769444,56.2426500538532,
1.396222222,56.4249181268777,
1.413675,56.5899996370107,
1.431127778,56.7378443017909,
1.448580556,56.8684070889576,
1.466033333,56.9816482301668,
1.483486111,57.0775332331044,
1.500938889,57.1560328919925,
1.518391667,57.2171232964848,
1.535844444,57.2607858389501,
1.553297222,57.2870072201392,
1.57075,57.2957794532367,
1.588202778,57.2870998662929,
1.605655556,57.2609711030382,
1.623108333,57.2174011220775,
1.640561111,57.1564031944663,
1.658013889,57.0779958996683,
1.675466667,56.9822031198963,
1.692919444,56.869054032838,
1.710372222,56.7385831027684,
1.727825,56.5908300700526,
1.745277778,56.425839939041,
1.762730556,56.2436629643616,
1.780183333,56.0443546356124,
1.797636111,55.8279756604603,
1.815088889,55.5945919461495,
1.832541667,55.3442745794271,
1.849994444,55.0770998048906,
1.867447222,54.7931490017642,
1.8849,54.4925086591115,
1.902352778,54.1752703494918,
1.919805556,53.8415307010676,
1.937258333,53.4913913681726,
1.954711111,53.1249590003486,
1.972163889,52.7423452098611,
1.989616667,52.3436665377027,
2.007069444,51.9290444180961,
2.024522222,51.4986051415062,
2.041975,51.0524798161726,
2.059427778,50.5908043281759,
2.076880556,50.1137193000472,
2.094333333,49.621370047936,
2.111786111,49.1139065373482,
2.129238889,48.5914833374676,
2.146691667,48.0542595740754,
2.164144444,47.502398881082,
2.181597222,46.9360693506853,
2.19905,46.3554434821715,
2.216502778,45.7606981293727,
2.233955556,45.1520144467993,
2.251408333,44.5295778344613,
2.268861111,43.8935778813974,
2.286313889,43.2442083079276,
2.303766667,42.5816669066475,
2.321219444,41.9061554821823,
2.338672222,41.2178797897192,
2.356125,40.5170494723354,
2.373577778,39.8038779971431,
2.391030556,39.0785825902689,
2.408483333,38.3413841706887,
2.425936111,37.5925072829375,
2.443388889,36.832180028715,
2.460841667,36.0606339974076,
2.478294444,35.2781041955485,
2.495747222,34.4848289752363,
2.5132,33.6810499615353,
2.530652778,32.8670119788782,
2.548105556,32.0429629764946,
2.565558333,31.209153952888,
2.583011111,30.3658388793834,
2.600463889,29.51327462277,
2.617916667,28.6517208670616,
2.635369444,27.7814400343989,
2.652822222,26.9026972051181,
2.670275,26.0157600370093,
2.687727778,25.1208986837907,
2.705180556,24.2183857128214,
2.722633333,23.30849602208,
2.740086111,22.3915067564329,
2.757538889,21.4676972232182,
2.774991667,20.537348807171,
2.792444444,19.600744884716,
2.809897222,18.6581707376535,
2.82735,17.7099134662646,
2.844802778,16.7562619018629,
2.862255556,15.7975065188194,
2.879708333,14.8339393460857,
2.897161111,13.8658538782447,
2.914613889,12.8935449861147,
2.932066667,11.9173088269339,
2.949519444,10.9374427541538,
2.966972222,9.95424522686727,
2.984425,8.96801571890083,
3.001877778,7.97905462759701,
3.019330556,6.98766318231621,
3.036783333,5.99414335268443,
3.054236111,4.99879775661586,
3.071688889,4.00192956813821,
3.089141667,3.00384242504801,
3.106594444,2.00484033642547};
int A_SIZE = 178 * 2;
float* DERIVATIVE(float* VALUES, int NUM_OF_VALUES)
{
    //ALLOCATE OUTPUT STORAGE, doesnt work for last value 
    float* DIFF = (float*)malloc(sizeof(float) * NUM_OF_VALUES-2);
    //RUN THROUGH WHOLE LIST
    DIFF[0] = VALUES[0];
    

    for (int i = 2; i < NUM_OF_VALUES; i++)
    {
        //CHECK FOR EVENS AND ODD POSITIONS IN LIST
        if ((i % 2) == 0)
        {
            //if even(x), return the same value
            DIFF[i] = VALUES[i];
            
        }
        else
        {
            //get slope between point a(current) and b(previous), and put the result at the y value of point b in new list
            DIFF[i - 2] = (VALUES[i] - VALUES[i - 2]) / (VALUES[i - 1] - VALUES[i - 3]);
        }
    }
    return DIFF;
}

int main()
{
    float* c = DERIVATIVE(A, A_SIZE);
    for (int l = 0; l < (A_SIZE-2); l += 2)
    {
        printf("%f", c[l]);
        printf(", ");
        printf("%f", c[l + 1]);
        printf("\n");
    }
    
}

